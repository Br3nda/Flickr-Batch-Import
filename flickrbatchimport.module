<?php

function flickrbatchimport_menu() {
  $items['flickrbatchimport'] = array(
    'page callback' => 'flickrbatchimport_page',
    'page arguments' => array(1),
    'title' => 'Flickr Batch Import',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('Run Flickr batch import'),
    
  );
  return $items;
}

function flickrbatchimport_perm() {
  return array('Run Flickr batch import');
}

function flickrbatchimport_page() {
  return drupal_get_form('flickrbatchimport_form');
}
function flickrbatchimport_form() {
  //the functions from flickr rippr
  include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');
  $flickr = @flickrapi_phpFlickr();

  $result = db_query("SELECT * FROM {flickrusers} ORDER BY flickrusername");

  $form['accounts'] = array('#type' => 'fieldset', '#title' => t('Flickr Accounts'));
  while($account = db_fetch_object($result)) {
//     drupal_set_message(print_r($account, 1));
    $search = $flickr->photos_search(array('user_id' => $account->flickrid, 'page'=>1, 'per_page' => 1));
    $count[$account->flickrid] = $search['pages'];
    $form['accounts']['account_'. $account->flickrid] = array(
      '#type' => 'checkbox',
      '#value' => TRUE,
      '#title' => t("!username (%count photos)", array('!username' => check_plain($account->flickrusername), '%count' => number_format($search['pages']))),
    );
  }

  $form['config'] = array('#type' => 'fieldset', '#title' => t('Config'));
  $form['config']['num_photos'] = array(
    '#type' => 'textfield', 
    '#title' => t('Number of photos per request'),
    '#description' => t('How many photos per request to the flickr api? Higher numbers mean less requests, but requires more memory on your webserver. If import is failing, try settings this number lower.'),
    '#default_value' => 10,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Import'));
  return $form;
}
function flickrbatchimport_form_submit($form_id, $form_state) {

  $num_photos = $form_state['values']['num_photos'];
  $operations = array();


  //the functions from flickr rippr
  include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');
  $flickr = @flickrapi_phpFlickr();


//   $result = db_query("SELECT * FROM {flickrusers}");
  foreach($form_state['values'] as $key => $val) {
    if (preg_match('!^account_!', $key)) {
      $nsid = preg_replace('!^account_!', '', $key);

      //     drupal_set_message(print_r($account, 1));
      $search = $flickr->photos_search(array('user_id' => $nsid, 'page'=>1, 'per_page' => 1));
      //     $count[$account->flickrid] = $search['pages'];
      //     $account->total_pages = $search['pages'];
      for ($i=0; $i<=100 & $i<=$search['pages']; $i++) {
	$operations[] = array('flickrbatchimport_process', array($nsid, $num_photos));
      }
    }
  }

  if (!count($operations)) {
    GLOBAL $user;
    return t('You have no Flickr Rippr accounts enabled. You can create them at !link', array('!link' => l('Flickr Rippr Accounts', 'user/'. $user->uid .'/flickrrippr')));
  }

//   return nl2br(print_r($operations, 1));
  $batch = array(
    'title' => t('Flickr Batch Importing'),
      'operations' => $operations,
      'finished' => 'flickrbatchimport_finished',
//     'file' => 'path_to_file_containing_myfunctions',
    );
  batch_set($batch);

  // only needed if not inside a form _submit handler :
//   batch_process();
  //   return '';
}

function flickrbatchimport_process($nsid, $num_photos, &$context) {

  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['pagenum'] = 0;
    $context['sandbox']['max'] = 100;
  }

  //the functions from flickr rippr
  include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');
  $flickr = @flickrapi_phpFlickr();
  
//   $num_photos = 10;
  $pagenum = variable_get('flickrbatchimport_pagenum_'. $num_photos . '_'. $nsid, 1);
  error_log("Page num = $pagenum");
  $query = array(
    'user_id' => $nsid,
    'per_page' => $num_photos,
    'page' =>  $pagenum,
    'sort' => 'date-taken-asc',
  );

//   error_log("Flickr Query = ". print_r($query, 1));
  $photos = $flickr->photos_search($query);
  if(!$photos) {
    $context['message'] = t('Error: No photos found.');
    return;
  }
  $total = $photos['pages'];

  $percent = ($pagenum / $total) * 100;

  $context['message'] = t("Imported %percent of photos by %user", array('%percent' => sprintf('%.2f', $percent) .'%', '%user' => $nsid));;

  error_log("$nsid Percentage done = $percent %  ($pagenum / $total");
  $context['progress'] = $percent;

//   $context['sandbox']['pagenum']++;

  if (!count($photos['photo'])) {

    error_log(print_r($photos, 1));

    error_log("Marking finished!");
    $context['sandbox']['progress'] = 1.0;
//     $context['finished'] = 1.0;
    $context['progress'] = 1.0;
  }
  else {
    
    foreach ($photos['photo'] as $p) {
      
      $node = flickrrippr_makenode($p['id']);
  
      error_log('Page ' . $pagenum .' of '. $total .'. "'. $p['title'] . '" by '. $account->flickrusername .' ' . url('node/'. $node->nid));

      $context['results'][] = $p['title'] . ' by '. $account->flickrusername .' ' . url('node/'. $node->nid);
//       $context['sandbox']['progress']++;
      $processed = $context['sandbox']['progress'] * $num_photos;
      
    }



    variable_set('flickrbatchimport_pagenum_'. $num_photos . '_'. $account->flickrid, $pagenum+1);

  }
//   $context['sandbox']['progress']++;

//   $context['sandbox']['pagenum']++;

  if (1 != $context['finished'] && $context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}


function flickrbatchimport_finished() {
  if ($success) {
    $message = format_plural(count($results), 'One post processed.', '@count posts processed.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  // Providing data for the redirected page is done through $_SESSION.
  foreach ($results as $result) {
    $items[] = t('Loaded node %title.', array('%title' => $result));
  }
  $_SESSION['my_batch_results'] = $items;

}